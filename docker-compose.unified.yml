version: "3.9"

# Unified Docker Compose configuration with environment variables for flexibility
# Usage: 
#   Default scenario: docker-compose -f docker-compose.unified.yml up -d
#   With specific filter: docker-compose -f docker-compose.unified.yml -e FILTER_TYPE=aggressive up -d
#   With docker stats: docker-compose -f docker-compose.unified.yml -e ENABLE_DOCKER_STATS=true up -d

services:
  infra:
    image: newrelic/infrastructure:latest
    container_name: nr-infra
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NRIA_VERBOSE: ${VERBOSE:-1}
      SAMPLE_RATE: ${SAMPLE_RATE:-60}
      COLLECT_CMDLINE: ${COLLECT_CMDLINE:-false}
      FILTER_TYPE: ${FILTER_TYPE:-standard}
    cap_add: [SYS_PTRACE, DAC_READ_SEARCH]
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./config/newrelic-infra-${FILTER_TYPE:-standard}.yml:/etc/newrelic-infra.yml:ro
      - ${MIN_MOUNTS:-/var/log}:/host/var/log:ro  # Empty if MIN_MOUNTS is not set
      - ${MIN_MOUNTS:-/var/lib/docker}:/host/var/lib/docker:ro
    tmpfs:
      - /tmp
      - /var/run
      - /var/db/newrelic-infra
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:18003/status", "||", "exit", "1"]
      interval: 10s
      retries: 5
    restart: unless-stopped
    security_opt:
      - ${SECURE_MODE:+seccomp:./profiles/seccomp-nr.json}
    deploy:
      resources:
        limits:
          memory: ${INFRA_MEMORY:-512M}

  otel:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-config.yaml"]
    environment:
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      HOST_PROC: /host/proc
      HOST_SYS: /host/sys
      INTERVAL: ${OTEL_INTERVAL:-10s}
    cap_add: [SYS_PTRACE, DAC_READ_SEARCH]
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./config/otel-${OTEL_CONFIG:-config}.yaml:/etc/otel-config.yaml:ro
      - ${ENABLE_DOCKER_STATS:+/var/run/docker.sock}:/var/run/docker.sock:ro  # Only mount when ENABLE_DOCKER_STATS is set
    tmpfs:
      - /tmp
      - /var/run
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:13133/healthz"]
      interval: 10s
      retries: 5
    restart: unless-stopped
    security_opt:
      - ${SECURE_MODE:+seccomp:./profiles/seccomp-nr.json}
    deploy:
      resources:
        limits:
          memory: ${OTEL_MEMORY:-512M}

  load:
    build: 
      context: ./load-image
      args:
        - BUILD_ARG=${BUILD_ARG:-default}
    container_name: stress-load
    user: "1000:1000"
    entrypoint: ["/entrypoint.sh"]
    environment:
      STRESS_CPU: ${STRESS_CPU:-2}
      STRESS_MEM: ${STRESS_MEM:-128M}
      STRESS_IO: ${STRESS_IO:-0}
      STRESS_DURATION: ${STRESS_DURATION:-0}  # 0 means run indefinitely
    tmpfs:
      - /tmp
      - /var/run
    deploy:
      resources:
        limits: 
          cpus: ${LOAD_CPUS:-"1.5"}
          memory: ${LOAD_MEMORY:-512M}
    healthcheck:
      test: ["CMD-SHELL", "pidof stress-ng || exit 1"]
      interval: 10s
      retries: 3
    restart: unless-stopped