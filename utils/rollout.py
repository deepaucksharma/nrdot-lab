"""
Rollout helper for deploying New Relic Infrastructure Agent configurations.

This module provides tools for safely deploying configurations across fleets.
It focuses on generating deployment artifacts rather than direct SSH access.
"""

import os
import sys
import json
from pathlib import Path
from typing import List, Dict, Optional, Union, Any, Tuple
import yaml
from rich.console import Console
from rich.panel import Panel
from rich.syntax import Syntax

console = Console()


class RolloutHelper:
    """Helps with rolling out configuration changes to fleets of hosts."""

    def __init__(
        self,
        config_path: Path,
        hosts_file: Optional[Path] = None,
        output_dir: Optional[Path] = None,
        dry_run: bool = False,
    ):
        """
        Initialize the rollout helper.

        Args:
            config_path: Path to the newrelic-infra.yml config file
            hosts_file: Optional path to hosts file (JSON format)
            output_dir: Directory to output generated files
            dry_run: Whether to only print commands without execution
        """
        self.config_path = config_path
        self.hosts_file = hosts_file
        self.output_dir = output_dir or Path("./rollout_artifacts")
        self.dry_run = dry_run

        # Ensure the config file exists
        if not self.config_path.exists():
            raise FileNotFoundError(f"Config file not found: {self.config_path}")

        # Read hosts file if provided
        self.hosts: List[Dict[str, Any]] = []
        if self.hosts_file and self.hosts_file.exists():
            with open(self.hosts_file, "r") as f:
                self.hosts = json.load(f)

        # Create output directory if it doesn't exist
        if not self.dry_run and not self.output_dir.exists():
            self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_deployment_script(self) -> Path:
        """
        Generate a shell script for deploying the configuration.

        Returns:
            Path to the generated script
        """
        script_content = self._generate_script_content()
        script_path = self.output_dir / "deploy_config.sh"

        if not self.dry_run:
            with open(script_path, "w") as f:
                f.write(script_content)
            os.chmod(script_path, 0o755)  # Make executable
        else:
            console.print(Panel(
                Syntax(script_content, "bash"),
                title="Generated Deployment Script",
                expand=False
            ))

        return script_path

    def _generate_script_content(self) -> str:
        """Generate the content for the deployment script."""
        script = [
            "#!/bin/bash",
            "# Auto-generated deployment script for New Relic Infrastructure Agent",
            "# Generated by process-lab rollout helper",
            "",
            "set -e",
            "",
            "# Configuration path on target hosts",
            "CONFIG_PATH=\"/etc/newrelic-infra.yml\"",
            "",
            "# Backup function",
            "backup_config() {",
            "    if [ -f \"$CONFIG_PATH\" ]; then",
            "        cp \"$CONFIG_PATH\" \"${CONFIG_PATH}.bak.$(date +%Y%m%d_%H%M%S)\"",
            "        echo \"Backed up existing config\"",
            "    fi",
            "}",
            "",
            "# Deploy to a single host",
            "deploy_to_host() {",
            "    local host=$1",
            "    echo \"Deploying to $host...\"",
            "    # Copy configuration",
            "    scp \"$(dirname \"$0\")/newrelic-infra.yml\" \"$host:$CONFIG_PATH\"",
            "    # Restart agent",
            "    ssh \"$host\" \"sudo systemctl restart newrelic-infra || sudo service newrelic-infra restart\"",
            "    echo \"Deployed to $host\"",
            "}",
            "",
            "# Main deployment logic",
            "main() {",
            "    if [ \"$#\" -eq 0 ]; then",
            "        echo \"Usage: $0 <host1> [host2] [host3] ...\"",
            "        echo \"   or: $0 --hosts-file hosts.txt\"",
            "        exit 1",
            "    fi",
            "",
            "    # Copy the config file to the script directory",
            f"    cp \"{self.config_path}\" \"$(dirname \"$0\")/newrelic-infra.yml\"",
            "",
            "    if [ \"$1\" = \"--hosts-file\" ]; then",
            "        if [ \"$#\" -lt 2 ]; then",
            "            echo \"Error: Missing hosts file path\"",
            "            exit 1",
            "        fi",
            "        ",
            "        while IFS= read -r host || [ -n \"$host\" ]; do",
            "            [ -z \"${host##\\#*}\" ] && continue  # Skip comments",
            "            [ -z \"$host\" ] && continue  # Skip empty lines",
            "            deploy_to_host \"$host\"",
            "        done < \"$2\"",
            "    else",
            "        # Deploy to each host provided as arguments",
            "        for host in \"$@\"; do",
            "            deploy_to_host \"$host\"",
            "        done",
            "    fi",
            "}",
            "",
            "main \"$@\"",
        ]
        return "\n".join(script)

    def generate_ansible_playbook(self) -> Tuple[Path, Path]:
        """
        Generate an Ansible playbook for deploying the configuration.

        Returns:
            Tuple of (playbook path, inventory path)
        """
        playbook_content = self._generate_playbook_content()
        inventory_content = self._generate_inventory_content()

        playbook_path = self.output_dir / "deploy_config.yml"
        inventory_path = self.output_dir / "inventory.yml"

        if not self.dry_run:
            # Copy config file to output directory
            config_dest = self.output_dir / "newrelic-infra.yml"
            with open(self.config_path, "r") as src, open(config_dest, "w") as dst:
                dst.write(src.read())

            # Write playbook and inventory
            with open(playbook_path, "w") as f:
                f.write(playbook_content)
            with open(inventory_path, "w") as f:
                f.write(inventory_content)
        else:
            console.print(Panel(
                Syntax(playbook_content, "yaml"),
                title="Generated Ansible Playbook",
                expand=False
            ))
            console.print(Panel(
                Syntax(inventory_content, "yaml"),
                title="Generated Ansible Inventory",
                expand=False
            ))

        return playbook_path, inventory_path

    def _generate_playbook_content(self) -> str:
        """Generate the content for the Ansible playbook."""
        playbook = {
            "name": "Deploy New Relic Infrastructure Agent Config",
            "hosts": "newrelic_hosts",
            "become": True,
            "tasks": [
                {
                    "name": "Ensure New Relic config directory exists",
                    "file": {
                        "path": "/etc",
                        "state": "directory",
                        "mode": "0755"
                    }
                },
                {
                    "name": "Backup existing config if present",
                    "command": "cp /etc/newrelic-infra.yml /etc/newrelic-infra.yml.bak.$(date +%Y%m%d_%H%M%S)",
                    "args": {
                        "creates": "/etc/newrelic-infra.yml.bak.$(date +%Y%m%d_%H%M%S)"
                    },
                    "ignore_errors": True
                },
                {
                    "name": "Deploy New Relic Infrastructure configuration",
                    "copy": {
                        "src": "newrelic-infra.yml",
                        "dest": "/etc/newrelic-infra.yml",
                        "owner": "root",
                        "group": "root",
                        "mode": "0644"
                    }
                },
                {
                    "name": "Restart New Relic Infrastructure Agent",
                    "service": {
                        "name": "newrelic-infra",
                        "state": "restarted"
                    }
                }
            ]
        }
        return yaml.dump([playbook], sort_keys=False)

    def _generate_inventory_content(self) -> str:
        """Generate the content for the Ansible inventory file."""
        inventory = {
            "all": {
                "children": {
                    "newrelic_hosts": {
                        "hosts": {}
                    }
                }
            }
        }

        # Add hosts from hosts file if available
        if self.hosts:
            for idx, host_info in enumerate(self.hosts):
                hostname = host_info.get("hostname") or f"host_{idx}"
                inventory["all"]["children"]["newrelic_hosts"]["hosts"][hostname] = {
                    "ansible_host": host_info.get("ip", hostname)
                }
                
                # Add any additional variables if they exist in host_info
                for key, value in host_info.items():
                    if key not in ("hostname", "ip"):
                        inventory["all"]["children"]["newrelic_hosts"]["hosts"][hostname][f"ansible_var_{key}"] = value
        else:
            # Placeholder for manually editing
            inventory["all"]["children"]["newrelic_hosts"]["hosts"] = {
                "example_host": {
                    "ansible_host": "10.0.0.1",
                    "ansible_user": "deploy"
                }
            }

        return yaml.dump(inventory, sort_keys=False)

    def print_commands(self) -> None:
        """Print commands that would be used to deploy the configuration."""
        config_basename = self.config_path.name
        
        console.print("\n[bold green]Deployment Commands:[/bold green]")
        console.print("\n1. Using SCP and SSH (not recommended for production):")
        console.print(f"   scp {self.config_path} USER@HOST:/etc/newrelic-infra.yml")
        console.print(f"   ssh USER@HOST 'sudo systemctl restart newrelic-infra'")
        
        console.print("\n2. Using Ansible (recommended):")
        console.print(f"   # Place your inventory in hosts.yml")
        console.print(f"   ansible-playbook -i hosts.yml deploy_newrelic.yml")
        
        console.print("\n3. Using configuration management tool:")
        console.print(f"   # Add {config_basename} to your CM system")
        console.print(f"   # Deploy using your standard deployment process")
        console.print("\n[yellow]Note: Always test deployments in non-production environments first[/yellow]")


def print_rollout_help(config_path: Path) -> None:
    """Print help for rolling out the configuration safely."""
    helper = RolloutHelper(config_path, dry_run=True)
    helper.print_commands()


def create_deployment_artifacts(
    config_path: Path,
    hosts_file: Optional[Path] = None,
    output_dir: Optional[Path] = None,
    mode: str = "ansible",
) -> None:
    """
    Create deployment artifacts for safe configuration rollout.
    
    Args:
        config_path: Path to the configuration file
        hosts_file: Optional path to hosts file
        output_dir: Directory to output generated files
        mode: Deployment mode ("ansible", "script", or "print")
    """
    helper = RolloutHelper(
        config_path=config_path,
        hosts_file=hosts_file,
        output_dir=output_dir,
        dry_run=(mode == "print")
    )
    
    if mode == "print":
        helper.print_commands()
    elif mode == "script":
        script_path = helper.generate_deployment_script()
        console.print(f"[green]Deployment script generated:[/green] {script_path}")
    elif mode == "ansible":
        playbook_path, inventory_path = helper.generate_ansible_playbook()
        console.print(f"[green]Ansible playbook generated:[/green] {playbook_path}")
        console.print(f"[green]Ansible inventory generated:[/green] {inventory_path}")
    else:
        console.print(f"[red]Unknown deployment mode:[/red] {mode}")
        console.print("Available modes: ansible, script, print")
